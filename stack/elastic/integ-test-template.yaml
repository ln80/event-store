AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31


Description: >
  Elastic Event Store Integration Tests Template


Resources:

  ConsumerTopic:
    Type: AWS::SNS::Topic
    Properties: 
      ContentBasedDeduplication: True
      TopicName: !Sub ${AWS::StackName}-consumer-topic.fifo
      FifoTopic: True
      ContentBasedDeduplication: true

  ConsumerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-consumer-queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 180

  ConsumerQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ConsumerQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal: '*'
          Action: sqs:SendMessage
          Resource: '*'
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref ConsumerTopic

  ConsumerSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: sqs
      TopicArn: !Ref ConsumerTopic
      Endpoint: !GetAtt ConsumerQueue.Arn
      RawMessageDelivery: true

  SchemaRegistry:
    Type: 'AWS::Glue::Registry'
    Properties:
      Description: 'Event Schema Registry'
      Name: !Sub ${AWS::StackName}-event-schema-registry
  
  EventStore:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./template.yaml
      Parameters:
        Name: !Sub ${AWS::StackName}-event-store
        PublishSNSTopicArn: !Ref ConsumerTopic
        EncodingFormat: "AVRO"
        GlueSchemaRegistryName: !Sub ${AWS::StackName}-event-schema-registry

Outputs:
  ConsumerQueueUrl:
    Description: "Event stream consumer queue url"
    Value: !Ref ConsumerQueue
  EventTable: 
    Description: "Event store dynamodb table"
    Value: !GetAtt EventStore.Outputs.EventTable

  SchemaRegistryName:
    Description: "Event Schema Registry"
    Value: !Sub ${AWS::StackName}-event-schema-registry