AWSTemplateFormatVersion: '2010-09-09'

Transform:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/function-refs-in-policy-attributes.html
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31


Description: >
  SAM Template for elastic event store

Metadata:
  AWS::ServerlessRepo::Application:
    Name: elastic-event-store
    Description: Elastic Event Store on top of DynamoDB
    Author: Reda Laanait
    SpdxLicenseId: MIT
    LicenseUrl: ../../LICENSE.txt
    ReadmeUrl: ../../README.md
    Labels: ['event-store', 'event-sourcing', 'ddd', 'dynamodb', 'serverless', 'go']
    HomePageUrl: https://github.com/ln80/event-store
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/ln80/event-store

Parameters:
  Name:
    Type: String
    MinLength: '3'
    Description: |
      Serverless application name mainly used as prefix for resource names

  DynamoDBBillingMode:
    Type: String
    Default: PAY_PER_REQUEST
    AllowedValues:
      - PROVISIONED
      - PAY_PER_REQUEST
  
  DynamoDBReadCapacity:
    Type: Number
    Default: 0
  
  DynamoDBWriteCapacity:
    Type: Number
    Default: 0
  
  AlarmSNSTopicArn:
    Type: String
    Default: ""
    Description: |
      Serverless application name mainly used as prefix for resource names

  PublishSNSTopicArn:
    Type: String
    Default: ""
    Description: |
      SNS topic ARN to publish events to

  BatchRecordEnabled:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
    Description: |
      BatchRecordEnabled indicates wether record events have to be published in a single message or not

  EncodingFormat:
    Type: String
    Default: "JSON"
    AllowedValues:
      - "JSON"
      - "AVRO"

  GlueSchemaRegistryName:
    Type: String
    Default: ""
  
  RetainResource:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
    Description: |
      RetainResource indicates if event store data is subject to deletion or not

Conditions:
  MustEnableAlarm: !Not
    - !Equals
      - !Ref AlarmSNSTopicArn
      - ''

  MustPublish:
    !Not
      - !Equals
        - ''
        - !Ref PublishSNSTopicArn

  MustRetainResource:
    !Equals
      - !Ref RetainResource
      - "true"

  MustUseAvro:
    !Equals
      - !Ref EncodingFormat
      - "AVRO"

Resources:
  EventTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: !If
      - "MustRetainResource"
      - "RetainExceptOnCreate" 
      - "Delete"
    Properties:
        DeletionProtectionEnabled: !If
          - "MustRetainResource"
          - true
          - false
        TableName: !Sub ${Name}-table
        AttributeDefinitions:
          -
            AttributeName: _pk
            AttributeType: S
          -
            AttributeName: _sk
            AttributeType: S
          -
            AttributeName: _lsik
            AttributeType: S
        
        KeySchema:
          -
            AttributeName: _pk
            KeyType: HASH
          -
            AttributeName: _sk
            KeyType: RANGE
        
        LocalSecondaryIndexes:
          - 
            IndexName: _lsi
            KeySchema:
              - 
                AttributeName: _pk
                KeyType: HASH
              - 
                AttributeName: _lsik
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        
        TimeToLiveSpecification:
            AttributeName: _ttl
            Enabled: true
        
        BillingMode: !Ref DynamoDBBillingMode
        ProvisionedThroughput:
          ReadCapacityUnits: !Ref DynamoDBReadCapacity
          WriteCapacityUnits: !Ref DynamoDBWriteCapacity
        
        StreamSpecification:
          StreamViewType: NEW_IMAGE

  IndexerDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
        QueueName: !Sub ${Name}-indexer-dlq
        MessageRetentionPeriod: 1209600 # 14 days
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 180

  PublisherDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
        QueueName: !Sub ${Name}-publisher-dlq
        MessageRetentionPeriod: 1209600 # 14 days
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 180


  # LAMBDA FUNCTIONS:
  
  IndexerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub ${Name}-IndexerFunction
      Timeout: 5
      CodeUri: indexer/
      Runtime: provided.al2
      Handler: bootstrap
      Architectures: [ arm64 ]
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt EventTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BisectBatchOnFunctionError: false
            ParallelizationFactor: 1
            # MaximumRecordAgeInSeconds: -1
            # MaximumRetryAttempts: -1
            MaximumRetryAttempts: 1000
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt IndexerDeadLetterQueue.Arn
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["INSERT"], "dynamodb": { "Keys" : {"_pk": {"S": [{"anything-but": [ "internal" ]}]}}}}'
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt IndexerDeadLetterQueue.QueueName
      Environment:
          Variables:
            DYNAMODB_TABLE: !Ref EventTable

  
  IndexerCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: MustEnableAlarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'Indexing global stream has failed.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${Name}-IndexerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 30
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !Ref AlarmSNSTopicArn


  PublisherFunction:
      Type: AWS::Serverless::Function
      Condition: MustPublish
      Metadata:
        BuildMethod: go1.x
      Properties:
        FunctionName: !Sub ${Name}-PublisherFunction
        Timeout: 5
        CodeUri: publisher/
        Runtime: provided.al2
        Handler: bootstrap
        Architectures: [ arm64 ]
        Events:
          StreamEvent:
            Type: DynamoDB
            Properties:
              Stream: !GetAtt EventTable.StreamArn
              StartingPosition: TRIM_HORIZON
              BisectBatchOnFunctionError: false
              ParallelizationFactor: 1
              # MaximumRecordAgeInSeconds: -1
              # MaximumRetryAttempts: -1
              MaximumRetryAttempts: 1000
              DestinationConfig:
                OnFailure:
                  Destination: !GetAtt PublisherDeadLetterQueue.Arn
              FilterCriteria:
                Filters:
                  - Pattern: '{"eventName": ["MODIFY"], "dynamodb": { "Keys" : {"_pk": {"S": [{"anything-but": [ "internal" ]}]}}}}'
        Policies:
          - AWSLambdaDynamoDBExecutionRole
          - SQSSendMessagePolicy:
              QueueName: !GetAtt PublisherDeadLetterQueue.QueueName
          - Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref PublishSNSTopicArn
          - !If
            - MustUseAvro
            - Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - glue:GetSchemaVersion
                    - glue:GetSchema
                    - glue:GetSchemaByDefinition
                    - glue:CreateSchema
                    - glue:RegisterSchemaVersion
                  Resource:
                    # seems that glue:GetSchemaVersion action requires wildcard as resource :(
                    - "*"
                    # - !Sub
                    #   - "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:schema/${RegistryName}/*"
                    #   - { RegistryName: !Ref GlueSchemaRegistryName }
                    # - !Sub
                    #   - "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:registry/${RegistryName}"
                    #   - { RegistryName: !Ref GlueSchemaRegistryName }
                    
            - !Ref AWS::NoValue
        Environment:
            Variables:
              SNS_TOPIC: !Ref PublishSNSTopicArn
              BATCH_RECORD_ENABLED: !Ref BatchRecordEnabled
              ENCODING_FORMAT: !Ref EncodingFormat
              GlUE_SCHEMA_REGISTRY: !Ref GlueSchemaRegistryName

  PublisherCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: MustEnableAlarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'Publishing events to SNS topic has failed'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${Name}-PublisherFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 30
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !Ref AlarmSNSTopicArn

Outputs:
  EventTable:
    Description: "Dynamodb Event Table"
    Value: !Ref EventTable
